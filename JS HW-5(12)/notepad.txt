1.)Constructor? new keyword? Why do we use it?
Ans: Constructor: The constructor method is a special method for creating and initializing an object created with a class.There can only be one special method with the name "constructor" in a class. It returns a reference to the Object constructor function that created the instance object.
Syntax: constructor([arguments]) { ... }
Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor
           https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor
new keyword: It does 5 things:

>It creates a new object. The type of this object, is simply object.
>It sets this new object's internal, inaccessible, [[prototype]] (i.e. __proto__) property to be the constructor function's external, accessible, prototype object (every function object automatically has a prototype property).
>It makes the this variable point to the newly created object.
>It executes the constructor function, using the newly created object whenever this is mentioned.
>It returns the newly created object, unless the constructor function returns a non-null object reference. In this case, that object reference is returned instead.
Syntax: new constructor[([arguments])]
Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new

2.) Instanceof?
Ans:The instanceof operator:

The instanceof allows to check if the object is created by given constructor:
function Rabbit() { }
var rabbit = new Rabbit
alert(rabbit instanceof Rabbit) // true
The instanceof has nothing to do with the constructor property. It follows the __proto__ chain instead.

Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof

3.) Prototype?
Ans:Every JavaScript object has a prototype. The prototype is also an object. Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.
The JavaScript prototype property allows you to add new properties to an existing prototype:
function Person(first, last, age, eyecolor) {
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eyecolor;
}
Person.prototype.nationality = "English";

References:
http://yehudakatz.com/2011/08/12/understanding-prototypes-in-javascript/
http://www.w3schools.com/js/js_object_prototypes.asp

4.) This keyword?
Ans: In JavaScript "this" always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of. When we define our faithful function doSomething() in a page, its owner is the page, or rather, the window object (or global object) of JavaScript. An onclick property, though, is owned by the HTML element it belongs to.

function doSomething() {
   this.style.color = '#cc0000';
}

Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this
           https://rainsoft.io/gentle-explanation-of-this-in-javascript/  